package sanp.mp100.integration;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import sanp.mp100.integration.RBUtil.Role;
import sanp.mpx.mc.ScreenLayout.LayoutMode;
import sanp.mpx.mc.ScreenLayout.FillPattern;

/**
 * Created by Tuyj on 2017/10/29.
 */

public class GsonObject {
    private static final Map<Integer, Role> value2role = new HashMap<Integer, Role>() {{
        put(Role.TeacherFullView.toValue(), Role.TeacherFullView);
        put(Role.TeacherFeature.toValue(), Role.TeacherFeature);
        put(Role.TeacherBlackboard.toValue(), Role.TeacherBlackboard);
        put(Role.StudentFullView.toValue(), Role.StudentFullView);
        put(Role.StudentFeature.toValue(), Role.StudentFeature);
        put(Role.Courseware.toValue(), Role.Courseware);
    }};
    private static final Map<String, Role> dsp2role = new HashMap<String, Role>() {{
        put(Role.Teacher.toString(), Role.Teacher);
        put(Role.TeacherFullView.toString(), Role.TeacherFullView);
        put(Role.TeacherFeature.toString(), Role.TeacherFeature);
        put(Role.TeacherBlackboard.toString(), Role.TeacherBlackboard);
        put(Role.Student.toString(), Role.Student);
        put(Role.StudentFullView.toString(), Role.StudentFullView);
        put(Role.StudentFeature.toString(), Role.StudentFeature);
        put(Role.Courseware.toString(), Role.Courseware);
    }};
    private static final Map<Integer, LayoutMode> value2layout = new HashMap<Integer, LayoutMode>() {{
        put(LayoutMode.UNSPECIFIED.toValue(), LayoutMode.UNSPECIFIED);
        put(LayoutMode.SYMMETRICAL.toValue(), LayoutMode.SYMMETRICAL);
        put(LayoutMode.ASYMMETRY_FIXED.toValue(), LayoutMode.ASYMMETRY_FIXED);
        put(LayoutMode.ASYMMETRY_OVERLAPPING.toValue(), LayoutMode.ASYMMETRY_OVERLAPPING);
        put(LayoutMode.FREE_STYLE.toValue(), LayoutMode.FREE_STYLE);
    }};
    private static final Map<String, LayoutMode> dsp2layout = new HashMap<String, LayoutMode>() {{
        put(LayoutMode.UNSPECIFIED.toString(), LayoutMode.UNSPECIFIED);
        put(LayoutMode.SYMMETRICAL.toString(), LayoutMode.SYMMETRICAL);
        put(LayoutMode.ASYMMETRY_FIXED.toString(), LayoutMode.ASYMMETRY_FIXED);
        put(LayoutMode.ASYMMETRY_OVERLAPPING.toString(), LayoutMode.ASYMMETRY_OVERLAPPING);
        put(LayoutMode.FREE_STYLE.toString(), LayoutMode.FREE_STYLE);
    }};
    private static final Map<Integer, FillPattern> value2fillpattern = new HashMap<Integer, FillPattern>() {{
        put(FillPattern.FILL_PATTERN_NONE.toValue(), FillPattern.FILL_PATTERN_NONE);
        put(FillPattern.FILL_PATTERN_ADAPTING.toValue(), FillPattern.FILL_PATTERN_ADAPTING);
        put(FillPattern.FILL_PATTERN_STRETCHED.toValue(), FillPattern.FILL_PATTERN_STRETCHED);
        put(FillPattern.FILL_PATTERN_CROPPING.toValue(), FillPattern.FILL_PATTERN_CROPPING);
    }};
    private static final Map<String, FillPattern> dsp2fillpattern = new HashMap<String, FillPattern>() {{
        put(FillPattern.FILL_PATTERN_NONE.toString(), FillPattern.FILL_PATTERN_NONE);
        put(FillPattern.FILL_PATTERN_ADAPTING.toString(), FillPattern.FILL_PATTERN_ADAPTING);
        put(FillPattern.FILL_PATTERN_STRETCHED.toString(), FillPattern.FILL_PATTERN_STRETCHED);
        put(FillPattern.FILL_PATTERN_CROPPING.toString(), FillPattern.FILL_PATTERN_CROPPING);
    }};

    public static Role Value2Role(final int value) {
        if(!value2role.containsKey(value))
            return Role.UNSPECIFIED;
        return value2role.get(value);
    }

    public static Role String2Role(String dsp) {
        if(!dsp2role.containsKey(dsp))
            return Role.UNSPECIFIED;
        return dsp2role.get(dsp);
    }

    public static LayoutMode Value2LayoutMode(int value) {
        if(!value2layout.containsKey(value))
            return LayoutMode.UNSPECIFIED;
        return value2layout.get(value);
    }

    public static LayoutMode String2LayoutMode(String dsp) {
        if(!dsp2layout.containsKey(dsp))
            return LayoutMode.UNSPECIFIED;
        return dsp2layout.get(dsp);
    }

    public static FillPattern Value2FillPattern(int value) {
        if(!value2fillpattern.containsKey(value))
            return FillPattern.FILL_PATTERN_NONE;
        return value2fillpattern.get(value);
    }

    public static FillPattern String2FillPattern(String dsp) {
        if(!dsp2fillpattern.containsKey(dsp))
            return FillPattern.FILL_PATTERN_NONE;
        return dsp2fillpattern.get(dsp);
    }

    public static class VideoSource {
        public String url;
        public int fillPattern;
        public List<Integer> roles;

        public VideoSource() {
            url = null;
            fillPattern = -1;
            roles = new ArrayList<>();
        }

        public VideoSource(String url, int fillPattern) {
            this.url = url;
            this.fillPattern = fillPattern;
            this.roles = new ArrayList<>();
        }

        public VideoSource(String url, int fillPattern, List<Integer> roles) {
            this(url, fillPattern);
            this.roles.addAll(roles);
        }

        public VideoSource(String url, List<Role> roles, int fillPattern) {
            this(url, fillPattern);
            for(Role role: roles)
                this.roles.add(role.toValue());
        }

        public VideoSource(RBUtil.Source source) {
            this(source.url, source.roles, source.pattern.toValue());
        }
    }
}
